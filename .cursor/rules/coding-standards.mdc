# Standards de Code - CPBO

## Vue.js 3 - Composition API

### Structure des composants
```vue
<template>
  <!-- Template avec structure claire -->
</template>

<script>
// Imports en premier
import { ref, computed, onMounted } from 'vue'
import OtherComponent from './OtherComponent.vue'

export default {
  name: 'ComponentName',
  components: {
    OtherComponent
  },
  props: {
    // Props avec validation
  },
  emits: ['event-name'],
  setup(props, { emit }) {
    // Logique du composant
    return {
      // Exposer les données et méthodes
    }
  }
}
</script>

<style scoped>
/* Styles avec variables CSS */
</style>
```

### Naming Conventions
- **Composants** : PascalCase (ex: `ContactForm.vue`)
- **Fichiers** : kebab-case (ex: `contact-form.vue`)
- **Variables** : camelCase (ex: `isSubmitting`)
- **Constantes** : UPPER_SNAKE_CASE (ex: `API_BASE_URL`)
- **Props** : camelCase (ex: `isOpen`)
- **Events** : kebab-case (ex: `form-submit`)

### Props et Events
```javascript
// Props avec validation
props: {
  variant: {
    type: String,
    default: 'primary',
    validator: (value) => ['primary', 'secondary'].includes(value)
  },
  disabled: {
    type: Boolean,
    default: false
  }
}

// Events déclarés
emits: ['click', 'submit', 'cancel']
```

## CSS et Styling

### Variables CSS
```css
:root {
  --primary-color: #2c5aa0;
  --secondary-color: #f39c12;
  --text-color: #333;
  --border-radius: 8px;
  --shadow: 0 2px 10px rgba(0,0,0,0.1);
}
```

### Classes et Structure
- Utiliser des classes sémantiques
- Éviter les styles inline
- Préférer les classes utilitaires
- Responsive design mobile-first

## Tests

### Tests Unitaires (Vitest)
```javascript
import { describe, it, expect, vi } from 'vitest'
import { mount } from '@vue/test-utils'
import Component from './Component.vue'

describe('Component', () => {
  it('should render correctly', () => {
    const wrapper = mount(Component)
    expect(wrapper.exists()).toBe(true)
  })
})
```

### Tests E2E (Playwright)
```javascript
import { test, expect } from '@playwright/test'

test('should submit form', async ({ page }) => {
  await page.goto('/')
  await page.fill('#name', 'John Doe')
  await page.click('button[type="submit"]')
  await expect(page.locator('.success')).toBeVisible()
})
```

## Structure des Dossiers

```
src/
├── components/
│   ├── ui/           # Composants UI réutilisables
│   ├── sections/     # Composants de sections
│   └── layout/       # Composants de layout
├── views/            # Pages de l'application
├── router/           # Configuration Vue Router
├── assets/           # Ressources statiques
└── tests/            # Tests
    ├── unit/         # Tests unitaires
    └── e2e/          # Tests E2E
```

## Bonnes Pratiques

### Performance
- Utiliser `v-show` vs `v-if` selon le contexte
- Éviter les re-renders inutiles
- Lazy loading des composants lourds
- Optimiser les images

### Accessibilité
- Utiliser les attributs ARIA
- Navigation clavier
- Contraste approprié
- Labels pour les formulaires

### Sécurité
- Validation des données
- Échappement des données utilisateur
- Protection XSS
- Validation côté client et serveur

### Maintenabilité
- Code lisible et documenté
- Composants réutilisables
- Tests complets
- Documentation à jour