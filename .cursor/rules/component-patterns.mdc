# Patterns de Composants - CPBO

## Composants UI R√©utilisables

### Button Component
```vue
<template>
  <button 
    :class="buttonClasses" 
    :disabled="disabled"
    @click="$emit('click', $event)"
  >
    <slot />
  </button>
</template>

<script>
export default {
  name: 'Button',
  props: {
    variant: {
      type: String,
      default: 'primary',
      validator: (value) => ['primary', 'secondary', 'outline'].includes(value)
    },
    size: {
      type: String,
      default: 'medium',
      validator: (value) => ['small', 'medium', 'large'].includes(value)
    },
    disabled: {
      type: Boolean,
      default: false
    }
  },
  emits: ['click'],
  computed: {
    buttonClasses() {
      return [
        'btn',
        `btn-${this.variant}`,
        `btn-${this.size}`,
        { 'btn-disabled': this.disabled }
      ]
    }
  }
}
</script>
```

### Card Component
```vue
<template>
  <div :class="cardClasses">
    <slot />
  </div>
</template>

<script>
export default {
  name: 'Card',
  props: {
    variant: {
      type: String,
      default: 'default',
      validator: (value) => ['default', 'elevated', 'outlined'].includes(value)
    },
    padding: {
      type: String,
      default: 'medium',
      validator: (value) => ['small', 'medium', 'large', 'none'].includes(value)
    }
  },
  computed: {
    cardClasses() {
      return [
        'card',
        `card-${this.variant}`,
        `card-padding-${this.padding}`
      ]
    }
  }
}
</script>
```

### Modal Component
```vue
<template>
  <Teleport to="body">
    <div v-if="isOpen" class="modal-overlay" @click="handleOverlayClick">
      <div class="modal-container" @click.stop>
        <div class="modal-header">
          <h2 class="modal-title">
            <slot name="title">{{ title }}</slot>
          </h2>
          <button class="modal-close" @click="$emit('close')" aria-label="Fermer">
            √ó
          </button>
        </div>
        <div class="modal-content">
          <slot />
        </div>
        <div v-if="$slots.footer" class="modal-footer">
          <slot name="footer" />
        </div>
      </div>
    </div>
  </Teleport>
</template>
```

## Composants de Sections

### Hero Section
```vue
<template>
  <section class="hero">
    <h1>{{ title }}</h1>
    <p>{{ subtitle }}</p>
    <div v-if="showButton" class="hero-actions">
      <Button 
        v-if="primaryButton" 
        :variant="primaryButton.variant || 'secondary'"
        @click="handleButtonClick(primaryButton)"
      >
        {{ primaryButton.text }}
      </Button>
    </div>
  </section>
</template>
```

### Event Card
```vue
<template>
  <Card class="event-card">
    <div class="event-date">
      <div class="day">{{ day }}</div>
      <div class="month">{{ month }}</div>
    </div>
    <div class="event-content">
      <h3 class="event-title">{{ title }}</h3>
      <p v-if="location" class="event-location">üìç {{ location }}</p>
      <p class="event-description">{{ description }}</p>
      <div v-if="tags && tags.length" class="event-tags">
        <span v-for="tag in tags" :key="tag" class="tag">{{ tag }}</span>
      </div>
    </div>
  </Card>
</template>
```

## Patterns de Validation

### Form Validation
```javascript
methods: {
  validateForm() {
    this.errors = {}
    
    if (!this.form.name.trim()) {
      this.errors.name = 'Le nom est requis'
    }
    
    if (!this.form.email.trim()) {
      this.errors.email = 'L\'email est requis'
    } else if (!this.isValidEmail(this.form.email)) {
      this.errors.email = 'L\'email n\'est pas valide'
    }
    
    return Object.keys(this.errors).length === 0
  },
  
  isValidEmail(email) {
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/
    return emailRegex.test(email)
  }
}
```

## Patterns de Gestion d'√âtat

### √âtat Local
```javascript
data() {
  return {
    form: {
      name: '',
      email: '',
      message: ''
    },
    errors: {},
    isSubmitting: false,
    submitStatus: null
  }
}
```

### √âv√©nements Personnalis√©s
```javascript
// √âmission d'√©v√©nements
this.$emit('submit', formData)
this.$emit('success', result)
this.$emit('error', error)

// √âcoute des √©v√©nements
@submit="handleSubmit"
@success="handleSuccess"
@error="handleError"
```

## Patterns de Tests

### Test de Composant
```javascript
import { mount } from '@vue/test-utils'
import Button from './Button.vue'

describe('Button', () => {
  it('renders with default props', () => {
    const wrapper = mount(Button, {
      slots: { default: 'Click me' }
    })
    
    expect(wrapper.text()).toBe('Click me')
    expect(wrapper.classes()).toContain('btn-primary')
  })
  
  it('emits click event when clicked', async () => {
    const wrapper = mount(Button)
    await wrapper.trigger('click')
    expect(wrapper.emitted('click')).toBeTruthy()
  })
})
```

### Test E2E
```javascript
import { test, expect } from '@playwright/test'

test('should submit contact form', async ({ page }) => {
  await page.goto('/')
  await page.click('text=Nous rejoindre')
  
  await page.fill('#name', 'John Doe')
  await page.fill('#email', 'john@example.com')
  await page.selectOption('#subject', 'inscription')
  await page.fill('#message', 'Test message')
  
  await page.click('button[type="submit"]')
  
  await expect(page.locator('.submit-message.success')).toBeVisible()
})
```

## Patterns de Styling

### Variables CSS
```css
:root {
  --primary-color: #2c5aa0;
  --secondary-color: #f39c12;
  --accent-color: #e74c3c;
  --text-color: #333;
  --light-bg: #f8f9fa;
  --white: #ffffff;
  --shadow: 0 2px 10px rgba(0,0,0,0.1);
  --border-radius: 8px;
}
```

### Classes Utilitaires
```css
.btn {
  display: inline-block;
  padding: 0.8rem 2rem;
  border-radius: var(--border-radius);
  font-weight: 600;
  transition: all 0.3s ease;
  border: none;
  cursor: pointer;
}

.card {
  background: var(--white);
  border-radius: var(--border-radius);
  box-shadow: var(--shadow);
  transition: transform 0.3s ease;
}

.grid {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
  gap: 2rem;
}
```